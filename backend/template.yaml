AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  back-end

  Sample SAM Template for back-end

Parameters:
  ApplicationName:
    Type: String
    Description: Name of our backend service
    Default: TripPlanner

Globals:
  Function:
    Timeout: 3

Resources:
  PasswordSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'PasswordSignInFunction'
      CodeUri: src/
      Handler: auth.password_signin.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt PasswordSignInExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /signin
            Method: POST

  PasswordSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'PasswordSignUpFunction'
      CodeUri: src/
      Handler: auth.password_signup.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt PasswordSignUpExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /signup
            Method: POST

  GoogleAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GoogleAuthFunction'
      CodeUri: src/
      Handler: auth.google_auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt GoogleAuthExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /google_auth
            Method: POST

  TestAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TestAuthFunction
      CodeUri: src/
      Handler: auth.test_auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt TestAuthExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /test_auth
            Method: GET

  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreateEventFunction'
      CodeUri: src/
      Handler: create_event.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt CreateEventExecutionRole.Arn
      Events:
        CreateEventAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /create_event
            Method: POST

  CreatePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreatePlanFunction'
      CodeUri: src/
      Handler: plan.create_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt CreatePlanExecutionRole.Arn
      Events:
        CreateEventAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /create_plan
            Method: POST

  UpdatePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'UpdatePlanFunction'
      CodeUri: src/
      Handler: plan.update_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt UpdatePlanExecutionRole.Arn
      Events:
        CreateEventAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /update_plan
            Method: POST

  DeletePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeletePlanFunction'
      CodeUri: src/
      Handler: plan.delete_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt DeletePlanExecutionRole.Arn
      Events:
        CreateEventAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /delete_plan
            Method: POST

  GetPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GetPlansFunction'
      CodeUri: src/
      Handler: plan.get_plans.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt DeletePlanExecutionRole.Arn
      Events:
        CreateEventAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /get_plans
            Method: GET

  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: MyRestApi
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PATCH,DELETE'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  DeletePlanExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeletePlanFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'


  UpdatePlanExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdatePlanFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'

  GetPlansExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetPlansFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'


  CreatePlanExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreatePlanFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'


  CreateEventExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateEventFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'

  TestAuthExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TestAuthFunction:*'
        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  PasswordSignInExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PasswordSignInFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  PasswordSignUpExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PasswordSignUpFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  GoogleAuthExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GoogleAuthFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApplicationName}'
