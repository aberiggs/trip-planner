AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  backend

  Sample SAM Template for backend

Parameters:
  ApplicationName:
    Type: String
    Description: Name of our backend service
    Default: TripPlanner

Globals:
  Function:
    Timeout: 30

Resources:
  PasswordSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'PasswordSignInFunction'
      CodeUri: src/
      Handler: auth.password_signin.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        PasswordSignInAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /signin
            Method: POST

  PasswordSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'PasswordSignUpFunction'
      CodeUri: src/
      Handler: auth.password_signup.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        PasswordSignUpAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /signup
            Method: POST

  GoogleAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GoogleAuthFunction'
      CodeUri: src/
      Handler: auth.google_auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GoogleAuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /google/auth
            Method: POST

  TestAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TestAuthFunction
      CodeUri: src/
      Handler: auth.test_auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        TestAuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /test_auth
            Method: GET

  CreateActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreateActivityFunction'
      CodeUri: src/
      Handler: activity.create_activity.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateActivityAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /activity/create
            Method: POST

  UpdateActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UpdateActivityFunction
      CodeUri: src/
      Handler: activity.update_activity.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateActivityAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /activity/update
            Method: POST

  DeleteActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeleteActivityFunction'
      CodeUri: src/
      Handler: activity.delete_activity.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeleteActivityAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /activity/delete
            Method: DELETE

  GetActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetActivityFunction
      CodeUri: src/
      Handler: activity.get_activity.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetActivityAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /activity/{activity_id}
            Method: GET

  CreatePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreatePlanFunction'
      CodeUri: src/
      Handler: plan.create_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreatePlanAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /plan/create
            Method: POST

  UpdatePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'UpdatePlanFunction'
      CodeUri: src/
      Handler: plan.update_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdatePlanAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /plan/update
            Method: POST

  DeletePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeletePlanFunction'
      CodeUri: src/
      Handler: plan.delete_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DeletePlanAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /plan/delete
            Method: DELETE

  GetPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GetPlansFunction'
      CodeUri: src/
      Handler: plan.get_plans.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreatePlansAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /plan/get
            Method: GET

  GetPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'GetPlanFunction'
      CodeUri: src/
      Handler: plan.get_plan.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetPlanAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /plan/get/{plan_id}
            Method: GET

  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: MyRestApi
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PATCH,DELETE'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApplicationName}'
