AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  back-end

  Sample SAM Template for back-end

Parameters:
  ApplicationName:
    Type: String
    Description: Name of our backend service
    Default: TripPlanner

Globals:
  Function:
    Timeout: 30

Resources:
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'AuthFunction'
      CodeUri: src/
      Handler: auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt AuthExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /auth
            Method: POST

  TestAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TestAuthFunction
      CodeUri: src/
      Handler: test_auth.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt TestAuthExecutionRole.Arn
      Events:
        AuthAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /test_auth
            Method: GET

  CreateActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'CreateActivityFunction'
      CodeUri: src/
      Handler: create_activity.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt CreateActivityExecutionRole.Arn
      Events:
        CreateActivityAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /create_activity
            Method: POST


  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: MyRestApi
      Cors:
        AllowMethods: "'GET,POST,OPTIONS,PATCH,DELETE'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  CreateActivityExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateActivityFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongo-db-connection-secret-lzoiPy'

  TestAuthExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TestAuthFunction:*'
        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  AuthExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudWatchLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AuthFunction:*'

        - PolicyName: 'SecretsManagerAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApplicationName}'
